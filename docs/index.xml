<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peacalm Notes - 双全的网站</title>
    <link>https://peacalm.github.io/</link>
    <description>Recent content on Peacalm Notes - 双全的网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jun 2022 20:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://peacalm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>排序融合公式 | Ranking Value Model</title>
      <link>https://peacalm.github.io/post/2022/ranking-value-model/</link>
      <pubDate>Sat, 11 Jun 2022 20:00:00 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/ranking-value-model/</guid>
      
        <description>&lt;p&gt;考虑有限候选多目标融合排序公式，目标个数$T$，候选对象个数$N$。
每一个候选对象都有$T$个目标分，需要按某个融合公式把它们融合成一个最终用于排序的分数。&lt;/p&gt;
&lt;h2 id=&#34;加法融合公式&#34;&gt;加法融合公式&lt;/h2&gt;
&lt;p&gt;加法融合公式是线性的，形式简单，参数少，调参容易。其形式是：
$$
RankScore = \sum_{i=1}^T w_i \cdot (b_i + t_i)
$$
其中，$t_i$ 为第$i$个目标的得分，$b_i$ 为第$i$个目标的Bias，一般固定为0，$w_i$ 为第$i$个目标的权重。&lt;/p&gt;
&lt;h2 id=&#34;乘法融合公式&#34;&gt;乘法融合公式&lt;/h2&gt;
&lt;p&gt;乘法融合公式是非线性的，形式复杂，参数多，调参相对困难一些，但一般能比加法融合公式取得更好的效果。
其基础形式是：
$$
RankScore = \prod_{i=1}^T (\beta_i + t_i) ^ {\alpha_i}
$$
其中，$t_i$ 为第$i$个目标的得分，$\alpha_i$和$\beta_i$ 为调整第$i$个目标权重的参数。实践中为了便于调参，可以把它改写成Bias形式：
$$
RankScore = \prod_{i=1}^T (b_i + \beta_i \cdot t_i) ^ {\alpha_i}
$$
$b_i$ 为第$i$个目标的Bias，一般固定为1，然后一个简单的调参方式是：在$t_i$的平均值的倒数的基础上调节$\beta_i$，在1附近调节$\alpha_i$。&lt;/p&gt;
&lt;h2 id=&#34;目标分预处理&#34;&gt;目标分预处理&lt;/h2&gt;
&lt;p&gt;除了将目标分直接代入融合公式外，还可以先对其做一定的预处理。&lt;/p&gt;
&lt;h3 id=&#34;归一化normalization&#34;&gt;归一化(Normalization)&lt;/h3&gt;
&lt;p&gt;目标分分布不稳定或分布不便于直接用到排序融合公式中时，可以把目标分归一化线性映射到稳定的$[A, B]$的区间，一般$B$取1，$A$可取0.01或更小或0：&lt;/p&gt;
&lt;p&gt;$$
\tilde{t} = \frac{ t - \min t } { \max t - \min t} \cdot (B - A) + A
$$&lt;/p&gt;
&lt;p&gt;其中，
$\max t = \max \limits_{1 \le j \le N} t^{(j)}$ 为目标分在$N$个候选对象上的分布的最大值，
$\min t = \min \limits_{1 \le j \le N} t^{(j)}$ 为目标分在$N$个候选对象上的分布的最小值，
$t^{(j)}$ 表示第$j$个候选对象的目标分。&lt;/p&gt;
&lt;h3 id=&#34;相对目标分&#34;&gt;相对目标分&lt;/h3&gt;
&lt;p&gt;在推荐系统中，不同用户对某一个动作的使用频率或喜好程度不同，则表现为某一个目标分在不同用户上的分布有大小区别，
因此可以用该目标分在当前待排序的有限候选集上的相对得分取代原始得分：&lt;/p&gt;
&lt;p&gt;$$
\hat{t} = \frac {t} { w \cdot \overline{t} + c }
$$&lt;/p&gt;
&lt;p&gt;其中，
$\overline{t} = \frac { \sum_{j=1}^N t^{(j)} } {N}$ 为目标分在$N$个候选对象上的分布的平均值，
w和c为待调整的参数。&lt;/p&gt;
&lt;p&gt;例如，应用相对目标分的乘法融合公式为：
$$
RankScore = \prod_{i=1}^T (b_i + \frac {t_i} {w_i \cdot \overline{t}_i + c_i} ) ^ {\alpha_i}
$$&lt;/p&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;此外，还可以将目标分按大小阈值截断，使用Sigmoid函数映射到0~1等。&lt;/p&gt;
&lt;h2 id=&#34;在融合公式中使用目标排名&#34;&gt;在融合公式中使用目标排名&lt;/h2&gt;
&lt;p&gt;除了在融合公式中使用目标得分外，还可以使用目标排名代替目标分。&lt;/p&gt;
&lt;p&gt;对全体候选对象按某一个目标分排序，则可得到每一个候选对象在这一个目标上的排名，记为$r_i$，表示第$i$个目标的排名，值为$[1, N]$之间的整数。
然后可以直接在融合公式中使用目标排名，或者将其归一化到$[\frac {1} {N}, 1]$之间，也就是将$r_i$除以$N$，之后再代入融合公式。&lt;br&gt;
需要注意的是，由于排序时一般是逆序排序，目标分最大的排名是1，因此使用目标排名代替目标分时改变了融合公式的单调性，需要相应地再调整一下融合公式的单调性。&lt;/p&gt;
&lt;p&gt;例如，在乘法融合公式中使用目标排名时，可以用$-\alpha$作为指数：&lt;/p&gt;
&lt;p&gt;$$
RankScore = \prod_{i=1}^T (b_i + \beta_i \cdot \tilde{r}_i) ^ {- \alpha_i}
$$
其中，$\tilde{r}_i = \frac {r_i} {N}$。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://peacalm.github.io/resume/</link>
      <pubDate>Sat, 11 Jun 2022 04:30:00 +0800</pubDate>
      
      <guid>https://peacalm.github.io/resume/</guid>
      
        <description>&lt;h2 id=&#34;工作经历&#34;&gt;工作经历&lt;/h2&gt;
&lt;p&gt;2017-2022，北京，字节跳动，后端开发工程师。评论排序系统架构和策略，推荐系统架构和策略。&lt;/p&gt;
&lt;h2 id=&#34;教育经历&#34;&gt;教育经历&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;学校&lt;/th&gt;
&lt;th&gt;院系&lt;/th&gt;
&lt;th&gt;专业&lt;/th&gt;
&lt;th&gt;学位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2014/09 – 2017/06&lt;/td&gt;
&lt;td&gt;东南大学&lt;/td&gt;
&lt;td&gt;自动化学院&lt;/td&gt;
&lt;td&gt;模式识别与智能系统&lt;/td&gt;
&lt;td&gt;工学硕士&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010/09 – 2014/06&lt;/td&gt;
&lt;td&gt;东南大学&lt;/td&gt;
&lt;td&gt;自动化学院&lt;/td&gt;
&lt;td&gt;自动化专业&lt;/td&gt;
&lt;td&gt;工学学士&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;在校时期专业技能&#34;&gt;(在校时期)专业技能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;熟练掌握C/C++语言，能够快速运用C/C++进行软件开发，爱好泛型编程；&lt;/li&gt;
&lt;li&gt;熟练掌握Python语言编程。&lt;/li&gt;
&lt;li&gt;熟练掌握数据结构和常用算法设计，喜欢编程比赛，在Github上创建并维护一个开源算法库。&lt;/li&gt;
&lt;li&gt;熟悉Linux系统操作及Bash脚本编程，熟悉Unix/Linux环境编程。&lt;/li&gt;
&lt;li&gt;熟悉嵌入式Linux系统开发流程，掌握MCU、DSP、ARM等处理器的硬件系统设计与软件开发；&lt;/li&gt;
&lt;li&gt;知识结构包括数据结构及常用算法、计算机网络、操作系统、数据库以及系统测试等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在校时期获奖情况&#34;&gt;(在校时期)获奖情况&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;奖项&lt;/th&gt;
&lt;th&gt;名次&lt;/th&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;计蒜之道2016程序设计大赛&lt;/td&gt;
&lt;td&gt;复赛前400&lt;/td&gt;
&lt;td&gt;企业级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;思杰代码大师&lt;/td&gt;
&lt;td&gt;二等奖(第二名)&lt;/td&gt;
&lt;td&gt;企业级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;白山极客挑战赛&lt;/td&gt;
&lt;td&gt;铜奖(138/825)&lt;/td&gt;
&lt;td&gt;企业级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;华为2016软件精英挑战赛&lt;/td&gt;
&lt;td&gt;江山赛区二等奖&lt;/td&gt;
&lt;td&gt;企业级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;Calix 2016 Future Star编程大赛&lt;/td&gt;
&lt;td&gt;三等奖&lt;/td&gt;
&lt;td&gt;企业级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;全国研究生数学建模大赛&lt;/td&gt;
&lt;td&gt;二等奖&lt;/td&gt;
&lt;td&gt;国家级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;东南大学自动化学院研究生会先进个人&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;院级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;全国研究生数学建模竞赛&lt;/td&gt;
&lt;td&gt;三等奖&lt;/td&gt;
&lt;td&gt;国家级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;东南大学自动化学院本科生优秀毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;院级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;东南大学电子设计竞赛&lt;/td&gt;
&lt;td&gt;一等奖&lt;/td&gt;
&lt;td&gt;校级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;东南大学智能车竞赛&lt;/td&gt;
&lt;td&gt;优秀奖&lt;/td&gt;
&lt;td&gt;校级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;东南大学Robcup机器人竞赛3D仿真组&lt;/td&gt;
&lt;td&gt;三等奖&lt;/td&gt;
&lt;td&gt;校级&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;在校时期项目经历&#34;&gt;(在校时期)项目经历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cplusplus Imporvement Library C++开源算法库(&lt;a href=&#34;https://github.com/peacalm/Cplusplus-Improvement-Library&#34;&gt;https://github.com/peacalm/Cplusplus-Improvement-Library&lt;/a&gt;)&lt;br&gt;
对C++标准库的扩展。包括高精度整数类型，树状数组类，位操作算法库，数论和组合数学算法库，矩阵类，并查集类，回文树类，排序算法库，string类扩展功能库，
touchable_heap容器类以及各种容器类型的ostream输出支持和实用调试工具等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电梯安全检测仪系统设计&lt;br&gt;
设计一款仪器通过对电梯运行过程中的震动、噪声、温湿度、开关门情况等信息的测量与分析评估电梯的安全情况。
主要负责仪器的整机方案设计和双目视觉测距测速模块的研发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于MCU的血液凝固检测仪系统设计和实现&lt;br&gt;
本科毕设。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Maglev一致性哈希和动态负载均衡 | Maglev Consistent Hasher and Dynamic Load Balancer</title>
      <link>https://peacalm.github.io/post/2022/maglev-consistent-hash/</link>
      <pubDate>Sat, 21 May 2022 07:07:00 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/maglev-consistent-hash/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;本文重点描述Maglev一致性哈希算法，并提出使Maglev一致性哈希算法支持带权重候选节点的改进方式，
以及描述了一致性哈希下的动态负载均衡策略，并给出开源&lt;a href=&#34;https://github.com/peacalm/cpp-maglev&#34;&gt;C++实现代码库&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一致性哈希&#34;&gt;一致性哈希&lt;/h2&gt;
&lt;p&gt;一致性哈希是一种将属于无限集的key稳定的映射到属于有限集的候选节点上的算法，它需要满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;稳定：候选节点集合不变时，一个固定的key，会稳定不变地映射到某一个候选节点上；&lt;/li&gt;
&lt;li&gt;最小扰动：当增加或减少候选节点时，只有少部分key需要重新映射，大部分key的映射结果不变；&lt;/li&gt;
&lt;li&gt;均衡：不同key应该均匀地分散到各个候选节点上，即一个key映射到每一个候选节点上的概率是相等的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见一致性哈希算法&#34;&gt;常见一致性哈希算法&lt;/h2&gt;
&lt;p&gt;环形哈希，也叫割环法，经典的一致性哈希算法，作者Karger等人于1997年提出一致性哈希算法的概念，
然后提出了这个一致性哈希算法。
更新和查询时间复杂度都是O(log(n))，空间复杂度O(n)，
但是通常均衡性不好，需要加入较多虚拟节点，也就加倍了时间和空间复杂度。&lt;/p&gt;
&lt;p&gt;Jump Consistent Hash。极简的一致性哈希算法，不到十行代码。
查询时间复杂度是O(log(n))，不需要更新操作，也不需要额外存储空间。
但是不能随机增删候选节点，只能在有序候选节点队列的尾部增删节点，实用性不强。&lt;/p&gt;
&lt;p&gt;Maglev一致性哈希算法。
查询时间复杂度O(1)，更新时间复杂度O(m)，空间复杂度O(m)，m通常为至少比n大10倍以上的一个素数常量。
较为实用，效果较好，下面重点介绍。&lt;/p&gt;
&lt;h2 id=&#34;maglev一致性哈希算法描述&#34;&gt;Maglev一致性哈希算法描述&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;选取哈希槽长度，素数M，生成空哈希槽数组；&lt;/li&gt;
&lt;li&gt;将候选节点列表排序；&lt;/li&gt;
&lt;li&gt;对每一个候选节点哈希得到两个随机数A、B(模M-1再加1保证非0或M的倍数)，然后得到一个从0到M-1的排列：X[k] = (A + k*B)%M, k=0,1,&amp;hellip;,M-1；&lt;/li&gt;
&lt;li&gt;排列中每一个数字代表一个槽位，轮询每一个候选节点的排列，从左到右选择排列中的第一个空槽位填充进去，直到哈希槽填充完整为止；&lt;/li&gt;
&lt;li&gt;对一个输入key，通过 key%M 映射到哈希槽中对应的候选节点。（这里的key通常需要哈希一下得到一个大随机数）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：分片均匀，均衡性好，查询速度快O(1)&lt;/li&gt;
&lt;li&gt;缺点：增删节点后更新较慢O(n)，并且没有完全实现最小扰动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一致性哈希支持带权重候选节点&#34;&gt;一致性哈希支持带权重候选节点&lt;/h2&gt;
&lt;h3 id=&#34;通用做法增加虚拟节点&#34;&gt;通用做法：增加虚拟节点&lt;/h3&gt;
&lt;p&gt;通常一致性哈希算法都是不支持带权重候选节点的，也就是一个key映射到每一个候选节点的概率是相等的。
因此，想要实现带权重的一致性哈希的一个普遍思路是增加虚拟节点。将一个实际的候选节点拆成多个虚拟节点，
拆成的虚拟节点的多少，即代表了这个实际候选节点的权重的大小。&lt;/p&gt;
&lt;h3 id=&#34;maglev一致性哈希算法支持带权重候选节点的特殊做法按权重正比概率阈值填充哈希槽位&#34;&gt;Maglev一致性哈希算法支持带权重候选节点的特殊做法：按权重正比概率阈值填充哈希槽位。&lt;/h3&gt;
&lt;p&gt;通常，增加虚拟节点的做法相当于增加了候选节点数n，如果时间空间复杂度与n有关，那么会相应增加复杂度。
其次，如果虚拟节点数增加的少，那么实际的权重比例会比较粗糙，即精度不够。&lt;/p&gt;
&lt;p&gt;Maglev算法的查询时间复杂度与n无关，是O(1)，所以增加虚拟节点法不会影响Maglev的查询速度，
但是由于Maglev算法需要选取一个比候选节点数大很多的大素数M，且这个M关系到更新的时间复杂度和占用的空间复杂度，
因此采用增加虚拟节点法也会增加一些消耗。&lt;/p&gt;
&lt;p&gt;观察Maglev算法哈希槽的填充过程可知，该算法是轮训每一个候选节点，让每一个候选节点占有一个哈希槽后才轮到下一个候选节点。
因此可以试想，只要让轮训到当前候选节点时，不一定完全占有一个候选节点，而是设定一个与该节点的权重成正比的概率阈值，
达到这个阈值后才占有一个哈希槽。这个概率阈值可以是：当前节点的权重除以所有节点的权重的最大值。
可以看出，无权重的情况，也就相当于每一个候选节点的权重都相等，因此对应的概率阈值也都相等，都是1。
另外，为了保证一致性哈希算法的稳定性，这里的概率生成要用稳定的伪随机概率，每一个候选节点用自己的固定信息，
比如节点ID，作为一个伪随机序列的种子，用这个伪随机序列称重的概率与对应的概率阈值相比较，来判断该节点在这一次轮训中要不要占有一个哈希槽位。&lt;/p&gt;
&lt;h2 id=&#34;一致性哈希下的动态负载均衡&#34;&gt;一致性哈希下的动态负载均衡&lt;/h2&gt;
&lt;p&gt;由开头对一致性哈希算法的描述中可以，输入的key是属于无限集的，是无法提前预知的，无法对其做任何分布性的要求。
因此，极有可能，输入的key就是极其不均衡的，而纯粹的一致性哈希又是要求结果必须是稳定的，所以不均衡的输入集，
最终会造成不均衡的映射结果。比如常见的热key问题，纯一致性哈希是无法解决的。&lt;/p&gt;
&lt;p&gt;因此，为了在未知的不确定的任意的输入集上都保持良好的均衡性，需要动态的调整映射策略，需要统计感知每一个候选节点当前的负载情况，
如果负载过高，则应该将当前key用某种算法重新映射到另外一个节点上，而这个重新映射的算法最好也是稳定的。&lt;/p&gt;
&lt;p&gt;对于Maglev算法来说，笔者提出一个简单的重新映射算法：&lt;code&gt;(key + (key % C + 1) * retry_cnt) % M&lt;/code&gt;。
其中C是某一个常数，而retry_cnt是重新映射次数，可见当retry_cnt为0时，即首次映射时，该算法就退化到了Maglev算法描述第5步描述的
&lt;code&gt;key % M&lt;/code&gt;的算法。&lt;/p&gt;
&lt;p&gt;除了重新映射即重新选取候选节点外，对于动态负载均衡来说，另一个重点是，如何描述节点负载以及如何判断是否负载过高。&lt;/p&gt;
&lt;p&gt;对于候选节点无权重的情况来说，任意一个候选节点每接收一个key，就增加这个key对应的负载值，如果所有的key对应的负载值都一样，即可记为1。
对于候选节点有权重的情况来说，不同的候选节点接收同一个key后对自身的负载影响是不同，需要乘以一个以自身权重为分母的负载归一化因子，
比如可以是：所有候选节点的权重的平均值除以当前节点的权重。这样，每一个候选节点接收一个key后，需要增加自身的负载归一化因子乘上这个key对应的负载值后，
这么多的负载增量。&lt;/p&gt;
&lt;p&gt;有了每一个key对每一个候选节点的负载增量定量描述后，就可以计算所有候选节点的平均负载值，然后设定一个阈值，负载大于平均负载某一个倍数的节点，
即可认为是过载节点。例如，这个倍数可选1.2 ~ 1.5。&lt;/p&gt;
&lt;p&gt;特别的，在RPC场景下，候选节点就相当于是远程服务器，每处理一个key就相当于一次远程服务请求。
因此，请求量、错误量、延时等信息也可用来描述候选节点的负载。错误数较多，延时过高时，即可认为当前节点负载过高。
但是为了避免全局的一致性哈希结果被大量破坏，可以对候选节点的每一项负载情况进行排名，然后限制只有该项负载排名很高的几个节点才能在这一负载项上被判定为过载。&lt;/p&gt;
&lt;p&gt;最后，负载是动态变化的，负载的统计记录信息需要实时更新，通常需要一个滑动窗口，每隔固定几秒钟，就生成一个新的统计单元，并滑动滑动窗口，
丢弃窗口中最老的统计单元的数据，加入最新的统计单元的数据。&lt;/p&gt;
&lt;h2 id=&#34;开源实现&#34;&gt;开源实现&lt;/h2&gt;
&lt;p&gt;以上所描述的Maglev一致性哈希算法，以及在此一致性哈希基础上的动态负载均衡策略，笔者已有一个完整的C++开源实现。
代码详见GitHub：&lt;a href=&#34;https://github.com/peacalm/cpp-maglev&#34;&gt;cpp-maglev&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>在线服务的异步RPC延时控制和无锁异步任务同步组件</title>
      <link>https://peacalm.github.io/post/2022/lockless-sync-kit/</link>
      <pubDate>Mon, 18 Apr 2022 19:04:20 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/lockless-sync-kit/</guid>
      
        <description>&lt;h2 id=&#34;一关于延时&#34;&gt;一、关于延时&lt;/h2&gt;
&lt;h3 id=&#34;控制延时是保证在线服务可用性的必要手段&#34;&gt;控制延时是保证在线服务可用性的必要手段&lt;/h3&gt;
&lt;p&gt;在线服务对延时敏感。一般对在线服务发起远程调用时，都会配有一个超时限制，一旦请求超时，
则认为本次请求失败，服务不可用。因此控制延时是保证在线服务可用性的必要手段。&lt;/p&gt;
&lt;h3 id=&#34;rpc远程调用耗时的复杂性&#34;&gt;RPC远程调用耗时的复杂性&lt;/h3&gt;
&lt;p&gt;网络环境是不可靠的，数据在网络中传输的耗时是不可控的，因此为了控制延时，
需要为每次socket发送和接受数据都配置一个超时限制。
而一次RPC远程调用可能需要执行多次socket请求，例如数据包很大、io状态不佳、需要重试等原因，
因此为单次socket请求设置的超时限制，并不能准确代表一次RPC远程调用的网络耗时。&lt;/p&gt;
&lt;p&gt;因此，为了更准确控制超时，一些RPC框架内置了io线程池，采用异步方式进行socket网络请求，
超时控制会比同步模式准确一些。&lt;/p&gt;
&lt;p&gt;不过，虽然异步请求是比同步请求模式更先进的控制超时的方式，但更复杂，
也引入了更多影响延时的因素和需要关注和调优的参数。
例如，异步模式虽然可以避免多次socket请求对超时控制的影响，但又引入了
io线程池的调度耗时、控制异步io超时的定时器的准确性等因素对总体RPC延时的影响。&lt;/p&gt;
&lt;p&gt;再退一步，从业务客户端视角看，一次RPC远程调用的耗时，除了网络耗时，
还包括数据在本端（客户端）和远端（服务端）的序列化和反序列化耗时，当数据包过大时，
这一部分耗时和对CPU的消耗也是不能忽视的。&lt;/p&gt;
&lt;h3 id=&#34;异步rpc是必要的&#34;&gt;异步RPC是必要的&lt;/h3&gt;
&lt;p&gt;因此，使用异步RPC远程调用总是必要的，除了能使延时控制得更准确外，还可以并行执行多个RPC请求，
进一步降低延时，而并行执行一些相互独立的任务也是降低延时的非常重要的优化策略。&lt;/p&gt;
&lt;p&gt;更进一步，除了RPC框架内置的异步网络请求模式外，还可以再退一层，站在业务的更大的视角上看，
在在线服务内建立线程池，用于执行异步任务，这些异步任务不仅可以包括RPC框架涵盖的网络请求，
还可以包含数据的序列化反序列化，以及业务上需要特殊处理的逻辑。
例如，假如一个业务上的异步任务其实内部需要先后访问两次远程服务，然后再做一些处理，
那么用一个业务上的异步任务给它一个整体上的超时，对业务上讲，控制延时将更准确。
或者，业务上的异步任务可以仅仅是对使用了同步RPC框架的一次RPC任务的封装，那么这个业务上设定的超时，
就包含了网络耗时、数据序列化反序列化耗时、业务特殊处理逻辑等所有步骤的耗时，
比单独使用RPC框架的超时，控制延时更准确。&lt;/p&gt;
&lt;h2 id=&#34;二关于同步&#34;&gt;二、关于同步&lt;/h2&gt;
&lt;p&gt;异步执行的程序之间总是需要同步的。&lt;/p&gt;
&lt;h3 id=&#34;无锁同步&#34;&gt;无锁同步&lt;/h3&gt;
&lt;p&gt;线程间同步一般常用锁，例如互斥锁、读写锁等，而&amp;quot;无锁&amp;quot;同步，一般就要直接使用原子标记，事实上，
锁的内部实现方式也是使用了原子标记。&lt;/p&gt;
&lt;h3 id=&#34;异步任务同步&#34;&gt;异步任务同步&lt;/h3&gt;
&lt;p&gt;业务上给每一个异步任务都设定一个预期的超时时间，主线程发送出一个或多个异步任务后，
等待一段时间——这个时间应该是这些异步任务超时时间的最大值——让这些任务并行执行一会儿，
然后需要判断异步任务执行得怎么样了，是已经成功了？或是已经失败了？或是还在执行中？
如果还在执行中，那么主线程可以给这个任务标记为&amp;quot;已超时&amp;quot;，
让这个超时任务不要再影响主线程，或进入超时任务的特殊处理方法。&lt;/p&gt;
&lt;p&gt;异步任务成功或失败的标记信息，是任务线程发送给主线程的信号，
而任务已超时的信息，是主线程发送给任务线程的信号。
这些就涉及到线程间同步问题。&lt;/p&gt;
&lt;h3 id=&#34;异步任务无锁同步组件c为例&#34;&gt;异步任务无锁同步组件，C++为例&lt;/h3&gt;
&lt;p&gt;以下C++实现代码中 SyncKit类 就是一个简单的异步任务无锁同步组件，
它是主线程和异步任务线程共享的数据结构，分别为其定义了可调用成员方法。
主线程调用master_开头的方法，异步任务线程调用slave_开头的方法。&lt;/p&gt;
&lt;p&gt;主线程使用方式很简单，发出异步任务后等待一段时间，然后调用master_check_ret()检查结果即可。
任务线程使用方式稍微复杂，主要要保证任务完成后将结果数据写入主线程提供的承载任务结果的数据结构时，
要保证主线程尚在等待，还没有标记超时。否则，如果主线程已经标记了超时，代表主线程可能已经开始使用
承载任务结果的数据结构了，如果此时任务线程还对这个数据结构进行修改，那么就会造成并发安全问题。
slave样例伪代码见下代码注释中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;169
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;170
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;171
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 用于保存异步任务执行结果的整型状态码。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 正数为任务成功，负数为任务失败，0代表尚未完成，可被判成超时。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TaskResultCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;TaskResultCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;succeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;failed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;set_succeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;success code should be positive&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;set_failed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;failure code should be negative&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// 异步任务同步工具。主线程为master，任务线程为slave。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 主线程发送异步任务时，打包一个SyncKit用作同步，同时还可以传入一个共享数据结构，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 用于让slave把任务执行结果数据保存在此。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SyncKit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SyncKit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 主线程master检查异步任务执行结果，如果尚未完成则标记已经超时。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TaskResultCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;master_check_ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;is_timeout_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slave_checking_timeout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// waiting
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 主线程检master查任务结果，但不标记超时。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TaskResultCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;master_peek_ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * slave code example:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * if slave_test_timeout():
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *   return
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * if invalid parameters or conditions:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *   slave_set_failed_unsafe&amp;lt;some failure code&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * slave starts to run a task。 e.g. do some RPC.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * 
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * // 异步任务已经完成，准备将任务结果写回到与master共享的数据结构中。
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * // 写之前先判断master是否已经标记超时。
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * if slave_check_whether_timeout():
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *     return
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * 
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * // 尚未超时，master还在等待。此后的代码逻辑必须保证slave一定会调用
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * // slave_set_failed&amp;lt;failure code&amp;gt;()或slave_set_succeeded&amp;lt;success code&amp;gt;()
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * // 并最终对 task_done_ 赋值为true，否则可能阻塞主线程。
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * 
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * if task failed:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *     slave writes failed result to shared data or does nothing.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *     slave_set_failed&amp;lt;some failure code&amp;gt;()
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   * else:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *     slave writes succeeded result to shared data.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *     slave_set_succeeded&amp;lt;some success code&amp;gt;()
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   */&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 任务线程slave检查主线程master是否已经标记超时。如果已经标记为超时，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 则slave不能再对与master共享的数据结构做任何修改，因为此时master可能正在读取这些数据。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 任务线程slave在修改与master共享的数据结构之前，必须调用此方法确保尚未超时。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;slave_check_whether_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;slave_checking_timeout_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_timeout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;slave_test_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_timeout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;failure_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slave_set_failed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;failure_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;success_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slave_set_succeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_succeeded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;success_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// use default code 1 for succeeded and -1 for failed.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;slave_set_ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;succeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;succeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;slave_set_succeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;slave_set_failed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// unsafe, could call this without calling slave_check_whether_timeout first.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 但是可能导致master观测到的TaskResultCode变化一次，从0变为负数。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;failure_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slave_set_failed_unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_timeout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_failed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;failure_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_timeout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slave_checking_timeout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atomic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task_done_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;TaskResultCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;



&lt;span class=&#34;c1&#34;&gt;// 以下是一些配套工具代码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SyncKit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SyncKitPtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SyncKitPtr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new_sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_shared&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SyncKit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SyncKitGuard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SyncKitPtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SyncKitPtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orther_sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orther_sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
                                   &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;master_check_ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SyncKitGuardList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SyncKitGuardMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SyncKitGuard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;留一个思考题，SyncKit类中的这些原子bool类型，最低需要使用什么MemoryOrder呢？
sec_cst? release-acquire? relaxed?&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>什么是好的本地缓存 | What Is a Good Local Cache</title>
      <link>https://peacalm.github.io/post/2022/what-is-a-good-local-cache/</link>
      <pubDate>Thu, 31 Mar 2022 02:15:21 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/what-is-a-good-local-cache/</guid>
      
        <description>&lt;p&gt;缓存技术，Cache，特别是LocalCache，是软件开发中非常常用的组件，也是提高性能的最简单的方式。
Cache一般有SideCar和Wrapper两种使用模式。&lt;/p&gt;
&lt;h2 id=&#34;cache的使用模式&#34;&gt;Cache的使用模式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SideCar模式：需要应用程序自己主动访问数据源服务并读写缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种模式可以是LocalCache，与应用程序集成部署，但是由于Cache功能与业务逻辑无耦合，非常独立，所以出现了很多优秀的独立出来的非常通用的第三方独立缓存服务，
比如Redis，Memcached等。
独立缓存服务一般与应用程序分开，独立部署，需要通过网络进行交互，数据量较大或对性能要求较高时，网络带宽消耗、延时、数据序列化反序列化的CPU消耗不能忽视。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Cache
↑  
|  
App  --&amp;gt;   DataSource
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Wrapper模式：应用程序只需要访问缓存，缓存具有代理能力可以帮助应用程序去访问数据源服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种模式需要对Cache做特殊化定制，一般是LocalCache，与应用程序集成部署，只需在内存中进行交互，性能较高。如果Cache设计的好，可以极大简化业务代码，
可以提高组件可复用性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;App --&amp;gt; Cache --&amp;gt; DataSource
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;那么怎么才算是一个好的LocalCache呢？从业务应用上要灵活好用，满足多种多样的业务需求，同时也要具有基本的高性能。&lt;/p&gt;
&lt;h2 id=&#34;灵活好用&#34;&gt;灵活好用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;具有单Key读写接口，也具有Batch读写接口。&lt;/li&gt;
&lt;li&gt;可以动态修改CacheSize，一般指缓存的数据条目数。&lt;/li&gt;
&lt;li&gt;可配置缓存策略，例如：LRU，LRU-k(lazy list adjustment)，FIFO等。&lt;/li&gt;
&lt;li&gt;可以设置一个数据的默认过期时间，也可以动态设置每一个Key的过期时间，特别的，在插入或读取时都可以设置和判断过期。&lt;/li&gt;
&lt;li&gt;可以配置读取数据源服务的CallbackOnFetching方法，以便应用Wrapper模式，当Key不存在或过期时，用来获取新数据。&lt;/li&gt;
&lt;li&gt;过期数据不自动删除，可配置一个CallbackOnExpiration方法来注入对过期数据的处理方式。比如可以删除数据，或把过期数据发送到某个消息队列、写入硬盘等，
或不对过期数据做任何处理，只等缓存用满以后自动逐出。&lt;/li&gt;
&lt;li&gt;支持多种QueryFlags:
&lt;ul&gt;
&lt;li&gt;Uncacheable:   本次Query不读写Cache，只从数据源服务获取数据并返回，不写入Cache，相当于没有Cache，只对Query做转发。&lt;/li&gt;
&lt;li&gt;Refresh:       本次Query不读取Cache数据，重新从数据源服务获取最新数据，并写入Cache，相当于刷新缓存。&lt;/li&gt;
&lt;li&gt;Peek:          本次Query只读取Cache数据，即使Miss或Expired也不从数据源服务获取最新数据，可用于窥测Cache状态，或保护后端数据源服务。&lt;/li&gt;
&lt;li&gt;Stale:         本次Query读取Cache数据时，可以接受过期的数据。&lt;/li&gt;
&lt;li&gt;StaleFailover: 本次Query如果从远程数据源服务读取数据失败，则可以接受Cache中的过期的数据。&lt;/li&gt;
&lt;li&gt;Fast:          本次Query只返回Cache里的数据，如果Miss或Expired，则发送eload任务刷新缓存，不阻塞当前Query。&lt;/li&gt;
&lt;li&gt;Preload:       本次Query如果在Cache中读取到合法数据，但是数据快过期了（比如已过了过期时间的80%，阈值可配置），则发送一个Reload任务来刷新缓存。&lt;/li&gt;
&lt;li&gt;ReturnExpired: 本次Query如果在Cache中读到了过期的数据，则把过期的数据也一起返回，供用户自主决定处理方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内置线程池可执行Reload任务，从数据源服务获取数据并填充Cache。&lt;/li&gt;
&lt;li&gt;可配置内置WatchDog线程，检查快要过期的数据并发送Reload任务，或清理过期数据等。&lt;/li&gt;
&lt;li&gt;可迭代操作Cache中的每一条数据，例如把Cache中的数据读出写入到其他设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高性能&#34;&gt;高性能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;并发性好。例如采用分桶机制、采用TBB的高性能并发容器库等。&lt;/li&gt;
&lt;li&gt;内存使用效率高。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>在线服务参数管理 | Parameters Management for Online Service</title>
      <link>https://peacalm.github.io/post/2022/parameters-management-for-online-service/</link>
      <pubDate>Thu, 17 Mar 2022 22:01:30 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/parameters-management-for-online-service/</guid>
      
        <description>&lt;p&gt;互联网公司业务发展快，策略复杂，软件迭代变更非常频繁。因此有必要有一套良好的参数管理思想控制在线服务的表现，以支持业务的频繁变更和AB实验等。&lt;/p&gt;
&lt;h2 id=&#34;参数分类&#34;&gt;参数分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认配置参数：分为远程配置和本地配置。远程配置可动态修改、动态加载，而不需要升级或重启服务，使用方便，
但是有稳定性和可靠性风险，比如由于网络中断、提供远程配置的载体服务异常等原因而导致取不到配置信息。
因此，还需要一套本地配置，随服务一起发布，理论上配置信息应该与远程配置是一模一样的，
但由于本地配置发布频率低，可能会比远程配置版本低，不过问题不大，本地配置主要是对远程配置不可用时做兜底的，
生效时机较少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实验参数：一般指AB实验的策略配置参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降级参数：服务故障时，临时注入的策略参数，用于降低策略复杂度、降低服务消耗、提高服务可用性，可能会对实验指标、效果指标有损。
由于AB实验指标可能对业务发展比较重要，因此降级参数还可以再细分一下优先级，分为优先级高于AB实验参数的高优降级参数和优先级低于AB实验参数的低优降级参数。
发生轻微故障时，使用低优降级参数则不会对实验指标有影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优先级&#34;&gt;优先级&lt;/h2&gt;
&lt;p&gt;服务初始化时，按照一定优先级合并多种参数用于后续处理。综上描述，按优先级从高到低，这一套在线服务参数的排列顺序是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;高优降级参数 -&amp;gt; 实验参数 -&amp;gt; 低优降级参数 -&amp;gt; 默认配置参数(远程配置参数 或 本地配置参数)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43;轻量级输出库MyOStream：可打印输出所有成员可迭代的容器</title>
      <link>https://peacalm.github.io/post/2022/myostream/</link>
      <pubDate>Thu, 17 Mar 2022 01:12:25 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/myostream/</guid>
      
        <description>&lt;h2 id=&#34;懒汉的烦恼&#34;&gt;懒汉的烦恼&lt;/h2&gt;
&lt;p&gt;使用C++编程时对数据打印输出比较麻烦，需要自行用for循环将vector, list, map等容器的成员一一打印输出。
相比之下Python, Golang等语言就可以直接对所有数据类型打印输出，这对于debug是很友好的特性。
因此，我开发了一个简单的C++库，几乎能够对所有容器直接打印输出，说几乎是因为我们只能对成员可访问可迭代的容器支持这个特性。&lt;/p&gt;
&lt;p&gt;支持的类型如下，以及他们的组合类型：&lt;/p&gt;
&lt;p&gt;std::pair, std::tuple, std::array, std::deque,
std::forward_list, std::initializer_list, std::list, std::vector,
std::set, std::multiset, std::unordered_set, std::unordered_multiset,
std::map, std::multimap, std::unordered_map, std::unordered_multimap.&lt;/p&gt;
&lt;h2 id=&#34;acmer助手&#34;&gt;ACMer助手&lt;/h2&gt;
&lt;p&gt;特别的，我们在打ACM比赛或做类似的OJ题目的过程中，需要debug的时候，我们不仅想要打印容器里的值，
而且还想要同时打印出变量名，以便我们在解题时，如果定义了多个容器变量，我们可以知道哪个变量的值使哪一个值，
因此我设计了watch功能。&lt;/p&gt;
&lt;p&gt;宏定义watch可以用一下两种方式：
一，用std::cout输出MYOSTREAM_WATCH_TO_STRING生成的字符串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;myostream.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define watch(...) std::cout &amp;lt;&amp;lt; MYOSTREAM_WATCH_TO_STRING(std::string, &amp;#34; = &amp;#34;, &amp;#34;\n&amp;#34;, &amp;#34;\n\n&amp;#34;, __VA_ARGS__)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;二，直接使用MYOSTREAM_WATCH，坏处是这里定义了一个变量&lt;code&gt;mycout&lt;/code&gt;，这段代码不能在头文件中被多个源文件include:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;myostream.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mycout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define watch(...) MYOSTREAM_WATCH(mycout, &amp;#34; = &amp;#34;, &amp;#34;\n&amp;#34;, &amp;#34;\n\n&amp;#34;, __VA_ARGS__)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，如下debug代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#ifndef ONLINE_JUDGE
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;myostream.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mycout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rdbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define watch(...) MYOSTREAM_WATCH(mycout, &amp;#34; = &amp;#34;, &amp;#34;\n&amp;#34;, &amp;#34;\n\n&amp;#34;, __VA_ARGS__)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#else
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define watch(...)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;complex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
                                              &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt;
                                               &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bb&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}},&lt;/span&gt;
                                              &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Aya&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;88.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;complex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在本地编译运行，可以输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;v = [1, 2, 3]

complex = &amp;lt;[1, 2, 3], {1: {a, aa}, 2: {b, bb}}, (Aya, 88.5)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;而在线提交，或定义了宏ONLINE_JUDGE后，则什么都不输出。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/peacalm/myostream&#34;&gt;lib MyOStream on github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>字节跳动发展史 | History of Bytedance</title>
      <link>https://peacalm.github.io/post/2022/bytedance-growth/</link>
      <pubDate>Fri, 04 Mar 2022 02:50:04 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/bytedance-growth/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2012年3月9日，字节跳动Bytedance成立于北京海淀锦秋家园一个四居室内。&lt;strong&gt;天使轮融资&lt;/strong&gt;，500万元，顺为资本、晨兴资本投资。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012年5月，内涵段子发布。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012年7月，&lt;strong&gt;A轮融资&lt;/strong&gt;，500万美元，SIG海纳亚洲独家投资。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012年8月，今日头条1.0版本上线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012年10月，累计用户数超过1000万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012年底，1500万激活用户数，近160万DAU。今日头条DAU超过100万？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013年5月下旬，&lt;strong&gt;B轮融资&lt;/strong&gt;，5000万美元，俄罗斯投资集团DST独家投资。公司估值千万+美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013年5月，第一次搬家，搬入盈都大厦10层。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013年8月，今日头条用户数突破5000万。开始尝试商业化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013年11月，今日头条和内涵段子激活用户数超过6000万，DAU接近600万，公司人数接近一百人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013年12月，累计用户数超过9500万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014年4月，今日头条MAU3000万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014年6月，今日头条激活用户数1.2亿，MAU4000万。&lt;strong&gt;C轮融资&lt;/strong&gt;，1亿美元，红杉资本、新浪微博基金领投。公司估值5亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014年12月，累计激活用户超过2亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014年底，公司人数约500人？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015年1月，今日头条累计用户2.2亿，DAU2000万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015年4月，累计激活用户超过2.5亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015年7月，总DAU超过5000万（WAP端+移动端），累计激活用户超过2.7亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015年9月，累计激活用户数超过3亿，DAU超过3000万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015年9月8日，今日头条推出头条号“千人万元”计划，同时推出“新媒体孵化器计划”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015年底，今日头条DAU3300万，公司人数大约1200人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年2月，今日头条开辟“头条寻人”平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年2月28日，从盈都搬到了中航广场。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年6月，累计激活用户数超过5亿，DAU超过4800万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年8月，今日头条战略投资国内知名图片库东方IC。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年8月底，累计激活用户数超过5.5亿，DAU超过6000万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年9月，抖音上线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年9月20日，张一鸣宣布将在未来一年拿出10亿人民币扶持短视频创作者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年10月15日，今日头条领投印度版今日头条Dailyhunt D轮融资。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年10月，今日头条激活用户数超过6亿，MAU超过1.4亿，DAU超过6600万，单用户日均使用时长超过76分钟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年12月，&lt;strong&gt;D轮融资&lt;/strong&gt;，10亿美元，建银国际、红杉资本投资。公司估值110亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年底，今日头条累计激活用户数超过7亿，DAU超过7800万。公司人数4千？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016年营收约60亿元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年2月，5000万美元全资收购美国移动短视频创作者社区Flipagram。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年5月，TikTok上线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年9月，&lt;strong&gt;E轮融资&lt;/strong&gt;，2亿美元，老虎基金、美国泛大西洋(600558)投资集团投资。公司估值220亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年11月，5000万美元投资猎豹移动旗下Live.me，8660万美元收购猎豹移动旗下News Republic，10亿美元收购Musical.ly，系彼时最大收购。
Musical.ly MAU6000万，美国MAU2000万，49%的用户都在美国。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年11月，公司内部开始全面使用飞书（当时名为Lark）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年底，公司人数1.3万？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年营收约160亿元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年1月，TikTok MAU5500万。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年2月，3亿美元收购Faceu激萌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年4月，抖音DAU破亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年4月10日下午，内涵段子被关停。损失2000万DAU，50亿年收入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年4月，公司品牌名从&amp;quot;今日头条&amp;quot;改为&amp;quot;字节跳动&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年10月，&lt;strong&gt;Pre-IPO轮投资&lt;/strong&gt;，40亿美元，春华资本、软银中国、云锋基金投资。公司估值750亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年12月，TikTok MAU 2.7亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年底，公司人数3.5万？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018年营收约500亿元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019年1月，3亿人民币收购锤子科技部分专利使用权，探索教育领域相关业务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019年7月，成立教育部门ZERO，陈林为负责人。朱文佳接替陈林作为今日头条CEO。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019年12月，TikTok MAU 5亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019年底，公司人数6万？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019年营收约1400亿元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年1月，抖音宣布DAU超过4亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年3月30日，&lt;strong&gt;战略融资&lt;/strong&gt;，Tiger Global Management(老虎环球基金)投资，未披露金额。公司估值达1000亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年6月，员工数7万？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年7月，TikTok MAU 6.9亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年9月，抖音宣布DAU突破6亿（抖音火山合并）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年10月，&lt;strong&gt;战略融资&lt;/strong&gt;，20亿美元，红杉资本、KKR等投资。公司估值1800亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年10月底，教育部门ZERO启用全新品牌&amp;quot;大力教育&amp;quot;，陈林出任CEO，教育部门已超过一万人，决心三年不盈利，专心做产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年底，全球所有应用程序的月活用户数达19亿。员工数超过十万人，其中正式员工近9万人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020年营收约2400亿元。营收343亿美元，毛利润增长93%至190亿美元，经营亏损21亿美元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021年3月，40美元收购沐瞳科技（100亿人民币现金和价值150亿人民币的股权）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021年5月20日，张一鸣宣布卸任CEO，梁汝波继任，年底完成交接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021年8月，收购VR创业公司Pico，50亿元？15亿美元(97亿人民币)？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021年9月，TikTok MAU 10亿，DAU 6亿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021年11月，梁汝波宣布组织调整，成立6个业务板块：抖音（包括头条、西瓜、搜索、百科等国内信息和服务业务）、大力教育、飞书、
火山引擎（企业级技术服务云平台）、朝夕光年（游戏业务）、TikTok。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021年营收580亿美元，约3700亿人民币，同比增长70%。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://peacalm.github.io/about/</link>
      <pubDate>Wed, 02 Mar 2022 20:55:18 +0800</pubDate>
      
      <guid>https://peacalm.github.io/about/</guid>
      
        <description>&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;
&lt;p&gt;我是李双全，可以叫我双全，男生，河北唐山人，90后，天蝎座，一名程序员，现居北京。&lt;/p&gt;
&lt;h3 id=&#34;工作经历&#34;&gt;工作经历&lt;/h3&gt;
&lt;p&gt;2017-2022，北京，字节跳动，后端开发工程师。评论排序系统架构和策略，推荐系统架构和策略。&lt;/p&gt;
&lt;h3 id=&#34;教育经历&#34;&gt;教育经历&lt;/h3&gt;
&lt;p&gt;2010-2017，南京，东南大学，自动化学院，获工学学士和工学硕士学位。&lt;/p&gt;
&lt;h3 id=&#34;业余爱好&#34;&gt;业余爱好&lt;/h3&gt;
&lt;p&gt;读书📖，写字✍️，诗歌&lt;a href=&#34;https://muyesq.cn&#34;&gt;📓&lt;/a&gt;，民谣🎧，健身💪，旅行，逛书店，看展，看音乐剧等等。&lt;/p&gt;
&lt;h2 id=&#34;关于本站&#34;&gt;关于本站&lt;/h2&gt;
&lt;p&gt;Peacalm寓意: peaceful &amp;amp; calm&lt;br&gt;
建站工具：Hugo + GitHubPages&lt;br&gt;
主题：Jane&lt;br&gt;
域名：使用GitHub提供的域名&lt;a href=&#34;https://peacalm.github.io&#34;&gt;peacalm.github.io&lt;/a&gt;或我的个人域名&lt;a href=&#34;https://lishuangquan.cn&#34;&gt;lishuangquan.cn&lt;/a&gt;都可以访问本站&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>

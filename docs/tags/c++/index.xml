<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Peacalm Notes</title>
    <link>https://peacalm.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Peacalm Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Oct 2024 22:20:14 +0800</lastBuildDate><atom:link href="https://peacalm.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lua C API中的迷惑行为 | Lua C API Confusions</title>
      <link>https://peacalm.github.io/post/2024/lua-c-api-confusions/</link>
      <pubDate>Tue, 22 Oct 2024 22:20:14 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2024/lua-c-api-confusions/</guid>
      <description>There are some very confusing behaviors in Lua C API. Here are some explanations for these. (Tested on Lua 5.4) 1. Type of number, integer, string Operations like lua_isnumber, lua_pushinteger, lua_isstring don&amp;rsquo;t mean checking the value&amp;rsquo;s type: Values with type number can also get true of lua_isstring. (Number is also string) There are no integer types in Lua. Values generated by lua_pushinteger has type number. Only values generated by lua_pushinteger</description>
    </item>
    
    <item>
      <title>&#34;nullptr&#34;是指针类型吗？如何用C&#43;&#43;的方式把&#34;T*&#34;转换成&#34;void*&#34; | Is &#34;nullptr&#34; a Pointer Type? How to Convert &#34;T*&#34; to &#34;void*&#34; by C&#43;&#43; Way</title>
      <link>https://peacalm.github.io/post/2023/nullptr/</link>
      <pubDate>Thu, 15 Jun 2023 19:58:20 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2023/nullptr/</guid>
      <description>nullptr是指针类型吗？ nullptr是C++里预定义的一个变量，它的类型是std::nullptr_t。 判断一个类型是否是指针类型，可</description>
    </item>
    
    <item>
      <title>查验C&#43;&#43;类型推导结果 | Check C&#43;&#43; Type Deduction Result</title>
      <link>https://peacalm.github.io/post/2023/cpp-type-deduction/</link>
      <pubDate>Tue, 16 May 2023 00:25:39 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2023/cpp-type-deduction/</guid>
      <description>如何查看类型 C++的类型系统是极其复杂的，基本类型与const, volatile, 指针，引用，数组，函数，类，成员变量， 成员函数等特性的组合能生成许多不同的</description>
    </item>
    
    <item>
      <title>在线服务的异步RPC延时控制和无锁异步任务同步组件</title>
      <link>https://peacalm.github.io/post/2022/lockless-sync-kit/</link>
      <pubDate>Mon, 18 Apr 2022 19:04:20 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/lockless-sync-kit/</guid>
      <description>一、关于延时 控制延时是保证在线服务可用性的必要手段 在线服务对延时敏感。一般对在线服务发起远程调用时，都会配有一个超时限制，一旦请求超时， 则认</description>
    </item>
    
    <item>
      <title>C&#43;&#43;轻量级输出库MyOStream：可打印输出所有成员可迭代的容器</title>
      <link>https://peacalm.github.io/post/2022/myostream/</link>
      <pubDate>Thu, 17 Mar 2022 01:12:25 +0800</pubDate>
      
      <guid>https://peacalm.github.io/post/2022/myostream/</guid>
      <description>懒汉的烦恼 使用C++编程时对数据打印输出比较麻烦，需要自行用for循环将vector, list, map等容器的成员一一打印输出。 相比之下Python</description>
    </item>
    
  </channel>
</rss>
